import { sendSMSMock, sendWhatsAppMock, validatePhoneNumber, getTwilioErrorDescription } from './notification-mock';

// Configuration pour basculer entre mock et Twilio rÃ©el
const USE_MOCK_SERVICES = process.env.USE_MOCK_NOTIFICATIONS === 'true' || !process.env.TWILIO_ACCOUNT_SID;

// Export des fonctions mockÃ©es ou rÃ©elles
export const sendSMS = USE_MOCK_SERVICES ? sendSMSMock : sendSMSReal;
export const sendWhatsApp = USE_MOCK_SERVICES ? sendWhatsAppMock : sendWhatsAppReal;

// Fonctions rÃ©elles (seront utilisÃ©es plus tard)
async function sendSMSReal(to: string, body: string): Promise<boolean> {
  console.log('ðŸ“± SMS rÃ©el dÃ©sactivÃ© pendant la vÃ©rification Twilio');
  console.log('ðŸ“± Destinataire:', to);
  console.log('ðŸ“± Message:', body);
  return false;
}

async function sendWhatsAppReal(to: string, body: string): Promise<boolean> {
  console.log('ðŸ’š WhatsApp rÃ©el dÃ©sactivÃ© pendant la vÃ©rification Twilio');
  console.log('ðŸ’š Destinataire:', to);
  console.log('ðŸ’š Message:', body);
  return false;
}

// Export des autres fonctions utilitaires
export { validatePhoneNumber, getTwilioErrorDescription };

// Fonction pour vÃ©rifier l'Ã©tat des services
export function getNotificationServiceStatus() {
  return {
    isMock: USE_MOCK_SERVICES,
    status: USE_MOCK_SERVICES ? 'mock' : 'real',
    message: USE_MOCK_SERVICES 
      ? 'ðŸ“‹ Services de notification en mode simulation' 
      : 'ðŸš€ Services de notification en mode production'
  };
}